
// Задаем двумерный масив
// строчный 

/*string[,] table = new string[2, 5];
//  для строк инициализация происходит с помощью String.Empty
// первая строка table [0, 0] table [0, 1] table [0, 2] ... table [0, 4] индекс с 0 считаем 
// вторая table [1, 0] table [1, 1] table [1, 2] ... table [1, 4] 
table[1, 2] = "слово"; // указываем в переменной table какаю хотим использовать строку и столбец 

for (int rows = 0; rows < 2; rows++) // цикл для строк rows < строки
{
    for (int columns = 0; columns < 5; columns++) //  цикл в цикле для столбцов 
    {
        Console.WriteLine($"-{table[rows, columns]}-"); // в консоли прописываем наш массив и количество строк и столбцов 
    }
}*/

// Задаем двумерный массив с числами 

//int[,] matrix = new int[3, 4]; //инциализация массива 

/*void PrintArray(int[,] matr) // метод печати массива 
{
    for (int i = 0; i < matr.GetLength(0); i++) // заменили пинудилеьное i < 3 на i < matrix.GetLength(0) для строк 
    {
        for (int j = 0; j < matr.GetLength(1); j++) // и тоже самое делаем для столбцов 
        {
            Console.Write($"{matr[i, j]} ");
        }
        Console.WriteLine();
    }
}

void FillArray(int[,] matr) // метод заполнения массива числами 
{
    for (int i = 0; i < matr.GetLength(0); i++)
    {
        for (int j = 0; j < matr.GetLength(1); j++)
        {
            matr[i,j] = new Random().Next(1, 10); // обращаемся к переменной matr [i, j] где i и j строки и столбцы и с помощью Random задаем произвольные числа от 1 до 10 
        }
    }
}
int[,] matrix = new int[3, 4]; 
PrintArray(matrix);
Console.WriteLine();
FillArray(matrix);
PrintArray(matrix);*/

/*int[,] pic = new int[,]
 {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
    {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
 };

void PrintImage(int[,] image) // метод печати массива 
{
    for (int i = 0; i < image.GetLength(0); i++) // заменили пинудилеьное i < 3 на i < matrix.GetLength(0) для строк 
    {
        for (int j = 0; j < image.GetLength(1); j++) // и тоже самое делаем для столбцов 
        {
            //Console.Write($"{image[i, j]} ");
            if (image[i, j] == 0) Console.Write($" ");
            else Console.Write($"+");
        }
        Console.WriteLine();
    }
}

void FillImage(int row, int col)
{
    if (pic[row, col] == 0) // условия что в массиве элементы с 0 не закрашиваются 
    {
        pic[row, col] = 1; // закрашиваем (1)
        FillImage(row - 1, col);
        FillImage(row, col - 1); // движение в процессе закрашивания вверх, права, влево, вниз 3
        FillImage(row + 1, col);
        FillImage(row, col + 1);
    }
}


PrintImage(pic);
FillImage(13, 13);
PrintImage(pic); */

/* // Нахождение факториала:
double Factorial(int n)
{
    if (n == 1) return 1; // !1 = 1, !0 = 1  факториалы 1 и 0  если n = 1, то возвращаем 1 
    else return n * Factorial(n - 1); // если не 1 то должны n умножить на факториал предыдущего чила 
}
for (int i = 0; i < 10; i++)
{
    Console.WriteLine($" {i}! = {Factorial(i)}");
} */
// То же рекурсия 
// f(1) = 1 
// f(2) = 2
// f(n) = f(n -1) + f(n -2)

double Fibonacci(int n)
{
    if (n == 1 || n == 2) return 1;
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}

for (int i = 1; i < 50; i++)
{
    Console.WriteLine($" f{i} = {Fibonacci(i)}");
}

